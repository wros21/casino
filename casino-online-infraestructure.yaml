AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infraestructura completa para Casino Online - Operación de microservicios'

Parameters:
  ProjectName:
    Type: String
    Default: promarketing
    Description: Nombre del proyecto
    
  OperationName:
    Type: String
    Default: casino-online
    Description: Nombre de la operación
    
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Ambiente de despliegue
    
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues: [t3.micro, t3.small, t3.medium, t3.large]
    Description: Tipo de instancia EC2
    
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Nombre del Key Pair para acceso SSH
    
  DatabasePassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Contraseña para la base de datos (mínimo 8 caracteres)

Mappings:
  RegionMap:
    ca-central-1:
      AMI: ami-0c02fb55956c7d316

Resources:
  # VPC Principal
  MainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 'rds-subnet-${ProjectName}-${OperationName}-${AWS::Region}'

  # RDS Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub 'rds-${ProjectName}-${OperationName}-dw-1'
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: '8.0'
      AllocatedStorage: 20
      StorageType: gp2
      DBName: casinodb
      MasterUsername: admin
      MasterUserPassword: !Ref DatabasePassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "03:00-04:00"
      PreferredMaintenanceWindow: "sun:04:00-sun:05:00"
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: !Sub 'rds-${ProjectName}-${OperationName}-dw-1-${AWS::Region}'

  # S3 Bucket para contenido estático
  StaticContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 's3-${ProjectName}-${OperationName}-static-content-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub 's3-${ProjectName}-${OperationName}-static-content-${AWS::Region}'

  # CloudFront Origin Access Identity
  CloudFrontOAI:
    Type: AWS::CloudFront::OriginAccessIdentity
    Properties:
      OriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${ProjectName} ${OperationName} S3 bucket'

  # S3 Bucket Policy para CloudFront
  StaticContentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticContentBucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}'
            Action: 's3:GetObject'
            Resource: !Sub '${StaticContentBucket}/*'

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt StaticContentBucket.RegionalDomainName
            Id: !Sub 'S3-${StaticContentBucket}'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
        Enabled: true
        IsIPV6Enabled: true
        Comment: !Sub 'CDN for ${ProjectName} ${OperationName}'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: !Sub 'S3-${StaticContentBucket}'
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        PriceClass: PriceClass_100
        Restrictions:
          GeoRestriction:
            RestrictionType: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
      Tags:
        - Key: Name
          Value: !Sub 'cdn-${ProjectName}-${OperationName}-1-${AWS::Region}'

  # CloudWatch Log Group
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ec2/${ProjectName}-${OperationName}'
      RetentionInDays: 14

  # IAM Role para EC2 instances
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${OperationName}-ec2-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub '${StaticContentBucket}/*'
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${OperationName}-ec2-role'

  # Instance Profile para EC2
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

Outputs:
  # VPC Outputs
  MainVPCId:
    Description: ID de la VPC principal
    Value: !Ref MainVPC
    Export:
      Name: !Sub '${AWS::StackName}-MainVPC-ID'

  DataWarehouseVPCId:
    Description: ID de la VPC de bodega de datos
    Value: !Ref DataWarehouseVPC
    Export:
      Name: !Sub '${AWS::StackName}-DataWarehouseVPC-ID'

  VPCPeeringConnectionId:
    Description: ID de la conexión VPC Peering
    Value: !Ref VPCPeeringConnection
    Export:
      Name: !Sub '${AWS::StackName}-VPCPeering-ID'

  # Network Outputs
  PublicSubnet1Id:
    Description: ID de la subred pública 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1-ID'

  PublicSubnet2Id:
    Description: ID de la subred pública 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2-ID'

  PrivateSubnet1Id:
    Description: ID de la subred privada 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1-ID'

  PrivateSubnet2Id:
    Description: ID de la subred privada 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2-ID'

  # Load Balancer Outputs
  LoadBalancerDNS:
    Description: DNS del Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-ALB-DNS'

  LoadBalancerURL:
    Description: URL del Application Load Balancer
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'

  # Database Outputs
  RDSEndpoint:
    Description: Endpoint de la base de datos RDS
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-RDS-Endpoint'

  # Redis Outputs
  RedisEndpoint:
    Description: Endpoint de Redis
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-Redis-Endpoint'

  # S3 and CDN Outputs
  S3BucketName:
    Description: Nombre del bucket S3
    Value: !Ref StaticContentBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket-Name'

  CloudFrontDomainName:
    Description: Nombre de dominio de CloudFront
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFront-Domain'

  CloudFrontURL:
    Description: URL de CloudFront
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'

  # Security Group IDs
  ALBSecurityGroupId:
    Description: ID del Security Group del ALB
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ALB-SG-ID'

  EC2SecurityGroupId:
    Description: ID del Security Group de EC2
    Value: !Ref EC2SecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-EC2-SG-ID'

  # Cost Estimation Data
  CostEstimationSummary:
    Description: Resumen para estimación de costos
    Value: !Sub |
      EC2 Instances: 3x ${InstanceType}
      RDS Instance: 1x db.t3.micro
      Redis: 1x cache.t3.micro
      NAT Gateway: 1
      ALB: 1
      S3 Bucket: 1
      CloudFront: 1:
        - Key: Name
          Value: !Sub 'vpc-${ProjectName}-${OperationName}-main-${AWS::Region}'

  # VPC para Bodega de Datos
  DataWarehouseVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub 'vpc-${ProjectName}-${OperationName}-data-${AWS::Region}'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'igw-${ProjectName}-${OperationName}-main-${AWS::Region}'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MainVPC
      InternetGatewayId: !Ref InternetGateway

  # Subredes Públicas
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'subnet-${ProjectName}-${OperationName}-public-1-${AWS::Region}'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'subnet-${ProjectName}-${OperationName}-public-2-${AWS::Region}'

  # Subredes Privadas
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 'subnet-${ProjectName}-${OperationName}-private-1-${AWS::Region}'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.20.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 'subnet-${ProjectName}-${OperationName}-private-2-${AWS::Region}'

  # Subredes de Base de Datos
  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DataWarehouseVPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 'subnet-${ProjectName}-${OperationName}-db-1-${AWS::Region}'

  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DataWarehouseVPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 'subnet-${ProjectName}-${OperationName}-db-2-${AWS::Region}'

  # Elastic IP para NAT Gateway
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'eip-${ProjectName}-${OperationName}-nat-${AWS::Region}'

  # NAT Gateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub 'nat-${ProjectName}-${OperationName}-main-${AWS::Region}'

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Sub 'rt-${ProjectName}-${OperationName}-public-${AWS::Region}'

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Sub 'rt-${ProjectName}-${OperationName}-private-${AWS::Region}'

  # Routes
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  # Route Table Associations
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # VPC Peering Connection
  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref MainVPC
      PeerVpcId: !Ref DataWarehouseVPC
      Tags:
        - Key: Name
          Value: !Sub 'pcx-${ProjectName}-${OperationName}-main-to-data-${AWS::Region}'

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group para Application Load Balancer
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub 'sg-${ProjectName}-${OperationName}-alb-${AWS::Region}'

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group para instancias EC2
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub 'sg-${ProjectName}-${OperationName}-ec2-${AWS::Region}'

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group para Redis
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'sg-${ProjectName}-${OperationName}-redis-${AWS::Region}'

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group para RDS
      VpcId: !Ref DataWarehouseVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub 'sg-${ProjectName}-${OperationName}-rds-${AWS::Region}'

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'alb-${ProjectName}-${OperationName}-main'
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub 'alb-${ProjectName}-${OperationName}-main-${AWS::Region}'

  # Target Groups
  FrontsiteTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'tg-${ProjectName}-${OperationName}-frontsite'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MainVPC
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: !Sub 'tg-${ProjectName}-${OperationName}-frontsite-${AWS::Region}'

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub 'lt-${ProjectName}-${OperationName}-frontsite'
      LaunchTemplateData:
        ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y docker
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user
            
            # Crear aplicación básica
            mkdir -p /app
            cat << 'EOF' > /app/index.html
            <!DOCTYPE html>
            <html>
            <head><title>Casino Online - Frontsite</title></head>
            <body>
                <h1>Bienvenido al Casino Online</h1>
                <p>Aplicación funcionando en: $(hostname)</p>
                <p>Timestamp: $(date)</p>
            </body>
            </html>
            EOF
            
            # Iniciar servidor web básico
            python3 -m http.server 80 --directory /app &
            
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub 'ec2-${ProjectName}-${OperationName}-frontsite-${AWS::Region}'

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub 'asg-${ProjectName}-${OperationName}-frontsite'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 6
      DesiredCapacity: 3
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref FrontsiteTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub 'asg-${ProjectName}-${OperationName}-frontsite-${AWS::Region}'
          PropagateAtLaunch: false

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontsiteTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Redis Subnet Group
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group para Redis
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # Redis Cluster
  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheClusterId: !Sub 'redis-${ProjectName}-${OperationName}-1'
      Engine: redis
      CacheNodeType: cache.t3.micro
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RedisSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'redis-${ProjectName}-${OperationName}-1-${AWS::Region}'

  # RDS Subnet Group
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group para RDS
      SubnetIds:
        - !Ref DatabaseSubnet1
        - !Ref DatabaseSubnet2
      Tags